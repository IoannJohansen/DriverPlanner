//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DriverPlanner.DPService {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="BaseUser", Namespace="http://schemas.datacontract.org/2004/07/DriverPlannerService.Models")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DriverPlanner.DPService.User))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DriverPlanner.DPService.Admin))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(DriverPlanner.DPService.Instructor))]
    public partial class BaseUser : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/DriverPlannerService.Models")]
    [System.SerializableAttribute()]
    public partial class User : DriverPlanner.DPService.BaseUser {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime BirthDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FIOField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DriverPlanner.DPService.Gender GenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GenderNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HashPassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ImageIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserEMAILField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserPhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserVKField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime BirthDate {
            get {
                return this.BirthDateField;
            }
            set {
                if ((this.BirthDateField.Equals(value) != true)) {
                    this.BirthDateField = value;
                    this.RaisePropertyChanged("BirthDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FIO {
            get {
                return this.FIOField;
            }
            set {
                if ((object.ReferenceEquals(this.FIOField, value) != true)) {
                    this.FIOField = value;
                    this.RaisePropertyChanged("FIO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DriverPlanner.DPService.Gender Gender {
            get {
                return this.GenderField;
            }
            set {
                if ((object.ReferenceEquals(this.GenderField, value) != true)) {
                    this.GenderField = value;
                    this.RaisePropertyChanged("Gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GenderName {
            get {
                return this.GenderNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GenderNameField, value) != true)) {
                    this.GenderNameField = value;
                    this.RaisePropertyChanged("GenderName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HashPass {
            get {
                return this.HashPassField;
            }
            set {
                if ((object.ReferenceEquals(this.HashPassField, value) != true)) {
                    this.HashPassField = value;
                    this.RaisePropertyChanged("HashPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImageIndex {
            get {
                return this.ImageIndexField;
            }
            set {
                if ((this.ImageIndexField.Equals(value) != true)) {
                    this.ImageIndexField = value;
                    this.RaisePropertyChanged("ImageIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserEMAIL {
            get {
                return this.UserEMAILField;
            }
            set {
                if ((object.ReferenceEquals(this.UserEMAILField, value) != true)) {
                    this.UserEMAILField = value;
                    this.RaisePropertyChanged("UserEMAIL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserPhone {
            get {
                return this.UserPhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.UserPhoneField, value) != true)) {
                    this.UserPhoneField = value;
                    this.RaisePropertyChanged("UserPhone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserVK {
            get {
                return this.UserVKField;
            }
            set {
                if ((object.ReferenceEquals(this.UserVKField, value) != true)) {
                    this.UserVKField = value;
                    this.RaisePropertyChanged("UserVK");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Admin", Namespace="http://schemas.datacontract.org/2004/07/DriverPlannerService.Models")]
    [System.SerializableAttribute()]
    public partial class Admin : DriverPlanner.DPService.BaseUser {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AdminEmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int AdminIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HashPassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AdminEmail {
            get {
                return this.AdminEmailField;
            }
            set {
                if ((object.ReferenceEquals(this.AdminEmailField, value) != true)) {
                    this.AdminEmailField = value;
                    this.RaisePropertyChanged("AdminEmail");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int AdminID {
            get {
                return this.AdminIDField;
            }
            set {
                if ((this.AdminIDField.Equals(value) != true)) {
                    this.AdminIDField = value;
                    this.RaisePropertyChanged("AdminID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HashPass {
            get {
                return this.HashPassField;
            }
            set {
                if ((object.ReferenceEquals(this.HashPassField, value) != true)) {
                    this.HashPassField = value;
                    this.RaisePropertyChanged("HashPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Instructor", Namespace="http://schemas.datacontract.org/2004/07/DriverPlannerService.Models")]
    [System.SerializableAttribute()]
    public partial class Instructor : DriverPlanner.DPService.BaseUser {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DriverPlanner.DPService.Cars CarField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CarIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FIOField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DriverPlanner.DPService.Gender GenderField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GenderInstructorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string HashPassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ImageIndexField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime InstructorBirthField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InstructorEMAILField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InstructorIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InstructorPhoneField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string InstructorVKField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoginField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DriverPlanner.DPService.Cars Car {
            get {
                return this.CarField;
            }
            set {
                if ((object.ReferenceEquals(this.CarField, value) != true)) {
                    this.CarField = value;
                    this.RaisePropertyChanged("Car");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CarID {
            get {
                return this.CarIDField;
            }
            set {
                if ((this.CarIDField.Equals(value) != true)) {
                    this.CarIDField = value;
                    this.RaisePropertyChanged("CarID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FIO {
            get {
                return this.FIOField;
            }
            set {
                if ((object.ReferenceEquals(this.FIOField, value) != true)) {
                    this.FIOField = value;
                    this.RaisePropertyChanged("FIO");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DriverPlanner.DPService.Gender Gender {
            get {
                return this.GenderField;
            }
            set {
                if ((object.ReferenceEquals(this.GenderField, value) != true)) {
                    this.GenderField = value;
                    this.RaisePropertyChanged("Gender");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GenderInstructor {
            get {
                return this.GenderInstructorField;
            }
            set {
                if ((object.ReferenceEquals(this.GenderInstructorField, value) != true)) {
                    this.GenderInstructorField = value;
                    this.RaisePropertyChanged("GenderInstructor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string HashPass {
            get {
                return this.HashPassField;
            }
            set {
                if ((object.ReferenceEquals(this.HashPassField, value) != true)) {
                    this.HashPassField = value;
                    this.RaisePropertyChanged("HashPass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImageIndex {
            get {
                return this.ImageIndexField;
            }
            set {
                if ((this.ImageIndexField.Equals(value) != true)) {
                    this.ImageIndexField = value;
                    this.RaisePropertyChanged("ImageIndex");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime InstructorBirth {
            get {
                return this.InstructorBirthField;
            }
            set {
                if ((this.InstructorBirthField.Equals(value) != true)) {
                    this.InstructorBirthField = value;
                    this.RaisePropertyChanged("InstructorBirth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstructorEMAIL {
            get {
                return this.InstructorEMAILField;
            }
            set {
                if ((object.ReferenceEquals(this.InstructorEMAILField, value) != true)) {
                    this.InstructorEMAILField = value;
                    this.RaisePropertyChanged("InstructorEMAIL");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InstructorID {
            get {
                return this.InstructorIDField;
            }
            set {
                if ((this.InstructorIDField.Equals(value) != true)) {
                    this.InstructorIDField = value;
                    this.RaisePropertyChanged("InstructorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstructorPhone {
            get {
                return this.InstructorPhoneField;
            }
            set {
                if ((object.ReferenceEquals(this.InstructorPhoneField, value) != true)) {
                    this.InstructorPhoneField = value;
                    this.RaisePropertyChanged("InstructorPhone");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string InstructorVK {
            get {
                return this.InstructorVKField;
            }
            set {
                if ((object.ReferenceEquals(this.InstructorVKField, value) != true)) {
                    this.InstructorVKField = value;
                    this.RaisePropertyChanged("InstructorVK");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Login {
            get {
                return this.LoginField;
            }
            set {
                if ((object.ReferenceEquals(this.LoginField, value) != true)) {
                    this.LoginField = value;
                    this.RaisePropertyChanged("Login");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Gender", Namespace="http://schemas.datacontract.org/2004/07/DriverPlannerService.Models")]
    [System.SerializableAttribute()]
    public partial class Gender : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GenderDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string GenderNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GenderDescription {
            get {
                return this.GenderDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.GenderDescriptionField, value) != true)) {
                    this.GenderDescriptionField = value;
                    this.RaisePropertyChanged("GenderDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string GenderName {
            get {
                return this.GenderNameField;
            }
            set {
                if ((object.ReferenceEquals(this.GenderNameField, value) != true)) {
                    this.GenderNameField = value;
                    this.RaisePropertyChanged("GenderName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Cars", Namespace="http://schemas.datacontract.org/2004/07/DriverPlannerService.Models")]
    [System.SerializableAttribute()]
    public partial class Cars : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CarIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CarNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CarYearField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DriverPlanner.DPService.Categories CategoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ImageIndexField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CarID {
            get {
                return this.CarIDField;
            }
            set {
                if ((this.CarIDField.Equals(value) != true)) {
                    this.CarIDField = value;
                    this.RaisePropertyChanged("CarID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CarName {
            get {
                return this.CarNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CarNameField, value) != true)) {
                    this.CarNameField = value;
                    this.RaisePropertyChanged("CarName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int CarYear {
            get {
                return this.CarYearField;
            }
            set {
                if ((this.CarYearField.Equals(value) != true)) {
                    this.CarYearField = value;
                    this.RaisePropertyChanged("CarYear");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DriverPlanner.DPService.Categories Category {
            get {
                return this.CategoryField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryField, value) != true)) {
                    this.CategoryField = value;
                    this.RaisePropertyChanged("Category");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryName {
            get {
                return this.CategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryNameField, value) != true)) {
                    this.CategoryNameField = value;
                    this.RaisePropertyChanged("CategoryName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImageIndex {
            get {
                return this.ImageIndexField;
            }
            set {
                if ((this.ImageIndexField.Equals(value) != true)) {
                    this.ImageIndexField = value;
                    this.RaisePropertyChanged("ImageIndex");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Categories", Namespace="http://schemas.datacontract.org/2004/07/DriverPlannerService.Models")]
    [System.SerializableAttribute()]
    public partial class Categories : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryDescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CategoryNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryDescription {
            get {
                return this.CategoryDescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryDescriptionField, value) != true)) {
                    this.CategoryDescriptionField = value;
                    this.RaisePropertyChanged("CategoryDescription");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CategoryName {
            get {
                return this.CategoryNameField;
            }
            set {
                if ((object.ReferenceEquals(this.CategoryNameField, value) != true)) {
                    this.CategoryNameField = value;
                    this.RaisePropertyChanged("CategoryName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="EmailDuplicateException", Namespace="http://schemas.datacontract.org/2004/07/DriverPlannerService.Exceptions")]
    [System.SerializableAttribute()]
    public partial class EmailDuplicateException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EMAILField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EMAIL {
            get {
                return this.EMAILField;
            }
            set {
                if ((object.ReferenceEquals(this.EMAILField, value) != true)) {
                    this.EMAILField = value;
                    this.RaisePropertyChanged("EMAIL");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoginDuplicateException", Namespace="http://schemas.datacontract.org/2004/07/DriverPlannerService.Exceptions")]
    [System.SerializableAttribute()]
    public partial class LoginDuplicateException : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string loginField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string login {
            get {
                return this.loginField;
            }
            set {
                if ((object.ReferenceEquals(this.loginField, value) != true)) {
                    this.loginField = value;
                    this.RaisePropertyChanged("login");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TimeTable", Namespace="http://schemas.datacontract.org/2004/07/DriverPlannerService.Models")]
    [System.SerializableAttribute()]
    public partial class TimeTable : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ClassIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DriverPlanner.DPService.ClassInterval ClassIntervalField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime DateOfClassField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DriverPlanner.DPService.Instructor InstructorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InstructorIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IntervalCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DriverPlanner.DPService.User UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ClassID {
            get {
                return this.ClassIDField;
            }
            set {
                if ((this.ClassIDField.Equals(value) != true)) {
                    this.ClassIDField = value;
                    this.RaisePropertyChanged("ClassID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DriverPlanner.DPService.ClassInterval ClassInterval {
            get {
                return this.ClassIntervalField;
            }
            set {
                if ((object.ReferenceEquals(this.ClassIntervalField, value) != true)) {
                    this.ClassIntervalField = value;
                    this.RaisePropertyChanged("ClassInterval");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime DateOfClass {
            get {
                return this.DateOfClassField;
            }
            set {
                if ((this.DateOfClassField.Equals(value) != true)) {
                    this.DateOfClassField = value;
                    this.RaisePropertyChanged("DateOfClass");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DriverPlanner.DPService.Instructor Instructor {
            get {
                return this.InstructorField;
            }
            set {
                if ((object.ReferenceEquals(this.InstructorField, value) != true)) {
                    this.InstructorField = value;
                    this.RaisePropertyChanged("Instructor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InstructorID {
            get {
                return this.InstructorIDField;
            }
            set {
                if ((this.InstructorIDField.Equals(value) != true)) {
                    this.InstructorIDField = value;
                    this.RaisePropertyChanged("InstructorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IntervalCode {
            get {
                return this.IntervalCodeField;
            }
            set {
                if ((this.IntervalCodeField.Equals(value) != true)) {
                    this.IntervalCodeField = value;
                    this.RaisePropertyChanged("IntervalCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DriverPlanner.DPService.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ClassInterval", Namespace="http://schemas.datacontract.org/2004/07/DriverPlannerService.Models")]
    [System.SerializableAttribute()]
    public partial class ClassInterval : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IntervalNumberField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TimeIntervalField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int IntervalNumber {
            get {
                return this.IntervalNumberField;
            }
            set {
                if ((this.IntervalNumberField.Equals(value) != true)) {
                    this.IntervalNumberField = value;
                    this.RaisePropertyChanged("IntervalNumber");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TimeInterval {
            get {
                return this.TimeIntervalField;
            }
            set {
                if ((object.ReferenceEquals(this.TimeIntervalField, value) != true)) {
                    this.TimeIntervalField = value;
                    this.RaisePropertyChanged("TimeInterval");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FeedBacks", Namespace="http://schemas.datacontract.org/2004/07/DriverPlannerService.Models")]
    [System.SerializableAttribute()]
    public partial class FeedBacks : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int FeedBackIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FeedBackMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DriverPlanner.DPService.Instructor InstructorField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int InstructorIDField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private DriverPlanner.DPService.User UserField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int FeedBackID {
            get {
                return this.FeedBackIDField;
            }
            set {
                if ((this.FeedBackIDField.Equals(value) != true)) {
                    this.FeedBackIDField = value;
                    this.RaisePropertyChanged("FeedBackID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FeedBackMessage {
            get {
                return this.FeedBackMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.FeedBackMessageField, value) != true)) {
                    this.FeedBackMessageField = value;
                    this.RaisePropertyChanged("FeedBackMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DriverPlanner.DPService.Instructor Instructor {
            get {
                return this.InstructorField;
            }
            set {
                if ((object.ReferenceEquals(this.InstructorField, value) != true)) {
                    this.InstructorField = value;
                    this.RaisePropertyChanged("Instructor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int InstructorID {
            get {
                return this.InstructorIDField;
            }
            set {
                if ((this.InstructorIDField.Equals(value) != true)) {
                    this.InstructorIDField = value;
                    this.RaisePropertyChanged("InstructorID");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public DriverPlanner.DPService.User User {
            get {
                return this.UserField;
            }
            set {
                if ((object.ReferenceEquals(this.UserField, value) != true)) {
                    this.UserField = value;
                    this.RaisePropertyChanged("User");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="DPService.IDriverPlannerService")]
    public interface IDriverPlannerService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/TryLogin", ReplyAction="http://tempuri.org/IDriverPlannerService/TryLoginResponse")]
        System.ValueTuple<int, DriverPlanner.DPService.BaseUser> TryLogin(string login, string hashPasssword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/TryLogin", ReplyAction="http://tempuri.org/IDriverPlannerService/TryLoginResponse")]
        System.Threading.Tasks.Task<System.ValueTuple<int, DriverPlanner.DPService.BaseUser>> TryLoginAsync(string login, string hashPasssword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/TryRegister", ReplyAction="http://tempuri.org/IDriverPlannerService/TryRegisterResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DriverPlanner.DPService.EmailDuplicateException), Action="http://tempuri.org/IDriverPlannerService/TryRegisterEmailDuplicateExceptionFault", Name="EmailDuplicateException", Namespace="http://schemas.datacontract.org/2004/07/DriverPlannerService.Exceptions")]
        [System.ServiceModel.FaultContractAttribute(typeof(DriverPlanner.DPService.LoginDuplicateException), Action="http://tempuri.org/IDriverPlannerService/TryRegisterLoginDuplicateExceptionFault", Name="LoginDuplicateException", Namespace="http://schemas.datacontract.org/2004/07/DriverPlannerService.Exceptions")]
        DriverPlanner.DPService.User TryRegister(DriverPlanner.DPService.User newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/TryRegister", ReplyAction="http://tempuri.org/IDriverPlannerService/TryRegisterResponse")]
        System.Threading.Tasks.Task<DriverPlanner.DPService.User> TryRegisterAsync(DriverPlanner.DPService.User newUser);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/GetGenders", ReplyAction="http://tempuri.org/IDriverPlannerService/GetGendersResponse")]
        DriverPlanner.DPService.Gender[] GetGenders();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/GetGenders", ReplyAction="http://tempuri.org/IDriverPlannerService/GetGendersResponse")]
        System.Threading.Tasks.Task<DriverPlanner.DPService.Gender[]> GetGendersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/UpdateUser", ReplyAction="http://tempuri.org/IDriverPlannerService/UpdateUserResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(DriverPlanner.DPService.LoginDuplicateException), Action="http://tempuri.org/IDriverPlannerService/UpdateUserLoginDuplicateExceptionFault", Name="LoginDuplicateException", Namespace="http://schemas.datacontract.org/2004/07/DriverPlannerService.Exceptions")]
        DriverPlanner.DPService.BaseUser UpdateUser(int role, DriverPlanner.DPService.BaseUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/UpdateUser", ReplyAction="http://tempuri.org/IDriverPlannerService/UpdateUserResponse")]
        System.Threading.Tasks.Task<DriverPlanner.DPService.BaseUser> UpdateUserAsync(int role, DriverPlanner.DPService.BaseUser user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/GetCars", ReplyAction="http://tempuri.org/IDriverPlannerService/GetCarsResponse")]
        DriverPlanner.DPService.Cars[] GetCars();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/GetCars", ReplyAction="http://tempuri.org/IDriverPlannerService/GetCarsResponse")]
        System.Threading.Tasks.Task<DriverPlanner.DPService.Cars[]> GetCarsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/GetClasses", ReplyAction="http://tempuri.org/IDriverPlannerService/GetClassesResponse")]
        DriverPlanner.DPService.TimeTable[] GetClasses(System.DateTime dateClass, int InstructorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/GetClasses", ReplyAction="http://tempuri.org/IDriverPlannerService/GetClassesResponse")]
        System.Threading.Tasks.Task<DriverPlanner.DPService.TimeTable[]> GetClassesAsync(System.DateTime dateClass, int InstructorID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/GetInstructors", ReplyAction="http://tempuri.org/IDriverPlannerService/GetInstructorsResponse")]
        DriverPlanner.DPService.Instructor[] GetInstructors();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/GetInstructors", ReplyAction="http://tempuri.org/IDriverPlannerService/GetInstructorsResponse")]
        System.Threading.Tasks.Task<DriverPlanner.DPService.Instructor[]> GetInstructorsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/PickTask", ReplyAction="http://tempuri.org/IDriverPlannerService/PickTaskResponse")]
        bool PickTask(DriverPlanner.DPService.TimeTable tRow, DriverPlanner.DPService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/PickTask", ReplyAction="http://tempuri.org/IDriverPlannerService/PickTaskResponse")]
        System.Threading.Tasks.Task<bool> PickTaskAsync(DriverPlanner.DPService.TimeTable tRow, DriverPlanner.DPService.User user);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/GetMyTasks", ReplyAction="http://tempuri.org/IDriverPlannerService/GetMyTasksResponse")]
        DriverPlanner.DPService.TimeTable[] GetMyTasks(DriverPlanner.DPService.BaseUser user, int role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/GetMyTasks", ReplyAction="http://tempuri.org/IDriverPlannerService/GetMyTasksResponse")]
        System.Threading.Tasks.Task<DriverPlanner.DPService.TimeTable[]> GetMyTasksAsync(DriverPlanner.DPService.BaseUser user, int role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/CancelTask", ReplyAction="http://tempuri.org/IDriverPlannerService/CancelTaskResponse")]
        void CancelTask(int taskID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/CancelTask", ReplyAction="http://tempuri.org/IDriverPlannerService/CancelTaskResponse")]
        System.Threading.Tasks.Task CancelTaskAsync(int taskID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/GetImage", ReplyAction="http://tempuri.org/IDriverPlannerService/GetImageResponse")]
        byte[] GetImage(int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/GetImage", ReplyAction="http://tempuri.org/IDriverPlannerService/GetImageResponse")]
        System.Threading.Tasks.Task<byte[]> GetImageAsync(int index);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/DownloadImage", ReplyAction="http://tempuri.org/IDriverPlannerService/DownloadImageResponse")]
        int DownloadImage(byte[] img, int oldIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/DownloadImage", ReplyAction="http://tempuri.org/IDriverPlannerService/DownloadImageResponse")]
        System.Threading.Tasks.Task<int> DownloadImageAsync(byte[] img, int oldIndex);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/GetFullProfiles", ReplyAction="http://tempuri.org/IDriverPlannerService/GetFullProfilesResponse")]
        System.ValueTuple<DriverPlanner.DPService.Instructor[], DriverPlanner.DPService.FeedBacks[]> GetFullProfiles();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/GetFullProfiles", ReplyAction="http://tempuri.org/IDriverPlannerService/GetFullProfilesResponse")]
        System.Threading.Tasks.Task<System.ValueTuple<DriverPlanner.DPService.Instructor[], DriverPlanner.DPService.FeedBacks[]>> GetFullProfilesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/AddFeedback", ReplyAction="http://tempuri.org/IDriverPlannerService/AddFeedbackResponse")]
        bool AddFeedback(DriverPlanner.DPService.FeedBacks newFeedback);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/AddFeedback", ReplyAction="http://tempuri.org/IDriverPlannerService/AddFeedbackResponse")]
        System.Threading.Tasks.Task<bool> AddFeedbackAsync(DriverPlanner.DPService.FeedBacks newFeedback);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/GetFeedbacks", ReplyAction="http://tempuri.org/IDriverPlannerService/GetFeedbacksResponse")]
        DriverPlanner.DPService.FeedBacks[] GetFeedbacks();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/GetFeedbacks", ReplyAction="http://tempuri.org/IDriverPlannerService/GetFeedbacksResponse")]
        System.Threading.Tasks.Task<DriverPlanner.DPService.FeedBacks[]> GetFeedbacksAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/GetUsers", ReplyAction="http://tempuri.org/IDriverPlannerService/GetUsersResponse")]
        DriverPlanner.DPService.User[] GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/GetUsers", ReplyAction="http://tempuri.org/IDriverPlannerService/GetUsersResponse")]
        System.Threading.Tasks.Task<DriverPlanner.DPService.User[]> GetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/RemoveUser", ReplyAction="http://tempuri.org/IDriverPlannerService/RemoveUserResponse")]
        void RemoveUser(int id, int role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/RemoveUser", ReplyAction="http://tempuri.org/IDriverPlannerService/RemoveUserResponse")]
        System.Threading.Tasks.Task RemoveUserAsync(int id, int role);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/RegisterInstrucor", ReplyAction="http://tempuri.org/IDriverPlannerService/RegisterInstrucorResponse")]
        void RegisterInstrucor(DriverPlanner.DPService.Instructor instructor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/RegisterInstrucor", ReplyAction="http://tempuri.org/IDriverPlannerService/RegisterInstrucorResponse")]
        System.Threading.Tasks.Task RegisterInstrucorAsync(DriverPlanner.DPService.Instructor instructor);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/CheckForTaskLimits", ReplyAction="http://tempuri.org/IDriverPlannerService/CheckForTaskLimitsResponse")]
        bool CheckForTaskLimits(int userID, System.DateTime selectedDatetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/CheckForTaskLimits", ReplyAction="http://tempuri.org/IDriverPlannerService/CheckForTaskLimitsResponse")]
        System.Threading.Tasks.Task<bool> CheckForTaskLimitsAsync(int userID, System.DateTime selectedDatetime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/GetCategories", ReplyAction="http://tempuri.org/IDriverPlannerService/GetCategoriesResponse")]
        DriverPlanner.DPService.Categories[] GetCategories();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/GetCategories", ReplyAction="http://tempuri.org/IDriverPlannerService/GetCategoriesResponse")]
        System.Threading.Tasks.Task<DriverPlanner.DPService.Categories[]> GetCategoriesAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/AddCar", ReplyAction="http://tempuri.org/IDriverPlannerService/AddCarResponse")]
        void AddCar(DriverPlanner.DPService.Cars newInstance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/AddCar", ReplyAction="http://tempuri.org/IDriverPlannerService/AddCarResponse")]
        System.Threading.Tasks.Task AddCarAsync(DriverPlanner.DPService.Cars newInstance);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/RemoveCar", ReplyAction="http://tempuri.org/IDriverPlannerService/RemoveCarResponse")]
        void RemoveCar(int carID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDriverPlannerService/RemoveCar", ReplyAction="http://tempuri.org/IDriverPlannerService/RemoveCarResponse")]
        System.Threading.Tasks.Task RemoveCarAsync(int carID);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDriverPlannerServiceChannel : DriverPlanner.DPService.IDriverPlannerService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DriverPlannerServiceClient : System.ServiceModel.ClientBase<DriverPlanner.DPService.IDriverPlannerService>, DriverPlanner.DPService.IDriverPlannerService {
        
        public DriverPlannerServiceClient() {
        }
        
        public DriverPlannerServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DriverPlannerServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DriverPlannerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DriverPlannerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.ValueTuple<int, DriverPlanner.DPService.BaseUser> TryLogin(string login, string hashPasssword) {
            return base.Channel.TryLogin(login, hashPasssword);
        }
        
        public System.Threading.Tasks.Task<System.ValueTuple<int, DriverPlanner.DPService.BaseUser>> TryLoginAsync(string login, string hashPasssword) {
            return base.Channel.TryLoginAsync(login, hashPasssword);
        }
        
        public DriverPlanner.DPService.User TryRegister(DriverPlanner.DPService.User newUser) {
            return base.Channel.TryRegister(newUser);
        }
        
        public System.Threading.Tasks.Task<DriverPlanner.DPService.User> TryRegisterAsync(DriverPlanner.DPService.User newUser) {
            return base.Channel.TryRegisterAsync(newUser);
        }
        
        public DriverPlanner.DPService.Gender[] GetGenders() {
            return base.Channel.GetGenders();
        }
        
        public System.Threading.Tasks.Task<DriverPlanner.DPService.Gender[]> GetGendersAsync() {
            return base.Channel.GetGendersAsync();
        }
        
        public DriverPlanner.DPService.BaseUser UpdateUser(int role, DriverPlanner.DPService.BaseUser user) {
            return base.Channel.UpdateUser(role, user);
        }
        
        public System.Threading.Tasks.Task<DriverPlanner.DPService.BaseUser> UpdateUserAsync(int role, DriverPlanner.DPService.BaseUser user) {
            return base.Channel.UpdateUserAsync(role, user);
        }
        
        public DriverPlanner.DPService.Cars[] GetCars() {
            return base.Channel.GetCars();
        }
        
        public System.Threading.Tasks.Task<DriverPlanner.DPService.Cars[]> GetCarsAsync() {
            return base.Channel.GetCarsAsync();
        }
        
        public DriverPlanner.DPService.TimeTable[] GetClasses(System.DateTime dateClass, int InstructorID) {
            return base.Channel.GetClasses(dateClass, InstructorID);
        }
        
        public System.Threading.Tasks.Task<DriverPlanner.DPService.TimeTable[]> GetClassesAsync(System.DateTime dateClass, int InstructorID) {
            return base.Channel.GetClassesAsync(dateClass, InstructorID);
        }
        
        public DriverPlanner.DPService.Instructor[] GetInstructors() {
            return base.Channel.GetInstructors();
        }
        
        public System.Threading.Tasks.Task<DriverPlanner.DPService.Instructor[]> GetInstructorsAsync() {
            return base.Channel.GetInstructorsAsync();
        }
        
        public bool PickTask(DriverPlanner.DPService.TimeTable tRow, DriverPlanner.DPService.User user) {
            return base.Channel.PickTask(tRow, user);
        }
        
        public System.Threading.Tasks.Task<bool> PickTaskAsync(DriverPlanner.DPService.TimeTable tRow, DriverPlanner.DPService.User user) {
            return base.Channel.PickTaskAsync(tRow, user);
        }
        
        public DriverPlanner.DPService.TimeTable[] GetMyTasks(DriverPlanner.DPService.BaseUser user, int role) {
            return base.Channel.GetMyTasks(user, role);
        }
        
        public System.Threading.Tasks.Task<DriverPlanner.DPService.TimeTable[]> GetMyTasksAsync(DriverPlanner.DPService.BaseUser user, int role) {
            return base.Channel.GetMyTasksAsync(user, role);
        }
        
        public void CancelTask(int taskID) {
            base.Channel.CancelTask(taskID);
        }
        
        public System.Threading.Tasks.Task CancelTaskAsync(int taskID) {
            return base.Channel.CancelTaskAsync(taskID);
        }
        
        public byte[] GetImage(int index) {
            return base.Channel.GetImage(index);
        }
        
        public System.Threading.Tasks.Task<byte[]> GetImageAsync(int index) {
            return base.Channel.GetImageAsync(index);
        }
        
        public int DownloadImage(byte[] img, int oldIndex) {
            return base.Channel.DownloadImage(img, oldIndex);
        }
        
        public System.Threading.Tasks.Task<int> DownloadImageAsync(byte[] img, int oldIndex) {
            return base.Channel.DownloadImageAsync(img, oldIndex);
        }
        
        public System.ValueTuple<DriverPlanner.DPService.Instructor[], DriverPlanner.DPService.FeedBacks[]> GetFullProfiles() {
            return base.Channel.GetFullProfiles();
        }
        
        public System.Threading.Tasks.Task<System.ValueTuple<DriverPlanner.DPService.Instructor[], DriverPlanner.DPService.FeedBacks[]>> GetFullProfilesAsync() {
            return base.Channel.GetFullProfilesAsync();
        }
        
        public bool AddFeedback(DriverPlanner.DPService.FeedBacks newFeedback) {
            return base.Channel.AddFeedback(newFeedback);
        }
        
        public System.Threading.Tasks.Task<bool> AddFeedbackAsync(DriverPlanner.DPService.FeedBacks newFeedback) {
            return base.Channel.AddFeedbackAsync(newFeedback);
        }
        
        public DriverPlanner.DPService.FeedBacks[] GetFeedbacks() {
            return base.Channel.GetFeedbacks();
        }
        
        public System.Threading.Tasks.Task<DriverPlanner.DPService.FeedBacks[]> GetFeedbacksAsync() {
            return base.Channel.GetFeedbacksAsync();
        }
        
        public DriverPlanner.DPService.User[] GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<DriverPlanner.DPService.User[]> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
        
        public void RemoveUser(int id, int role) {
            base.Channel.RemoveUser(id, role);
        }
        
        public System.Threading.Tasks.Task RemoveUserAsync(int id, int role) {
            return base.Channel.RemoveUserAsync(id, role);
        }
        
        public void RegisterInstrucor(DriverPlanner.DPService.Instructor instructor) {
            base.Channel.RegisterInstrucor(instructor);
        }
        
        public System.Threading.Tasks.Task RegisterInstrucorAsync(DriverPlanner.DPService.Instructor instructor) {
            return base.Channel.RegisterInstrucorAsync(instructor);
        }
        
        public bool CheckForTaskLimits(int userID, System.DateTime selectedDatetime) {
            return base.Channel.CheckForTaskLimits(userID, selectedDatetime);
        }
        
        public System.Threading.Tasks.Task<bool> CheckForTaskLimitsAsync(int userID, System.DateTime selectedDatetime) {
            return base.Channel.CheckForTaskLimitsAsync(userID, selectedDatetime);
        }
        
        public DriverPlanner.DPService.Categories[] GetCategories() {
            return base.Channel.GetCategories();
        }
        
        public System.Threading.Tasks.Task<DriverPlanner.DPService.Categories[]> GetCategoriesAsync() {
            return base.Channel.GetCategoriesAsync();
        }
        
        public void AddCar(DriverPlanner.DPService.Cars newInstance) {
            base.Channel.AddCar(newInstance);
        }
        
        public System.Threading.Tasks.Task AddCarAsync(DriverPlanner.DPService.Cars newInstance) {
            return base.Channel.AddCarAsync(newInstance);
        }
        
        public void RemoveCar(int carID) {
            base.Channel.RemoveCar(carID);
        }
        
        public System.Threading.Tasks.Task RemoveCarAsync(int carID) {
            return base.Channel.RemoveCarAsync(carID);
        }
    }
}
